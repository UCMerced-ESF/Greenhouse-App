{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/Greenhouse-app/src/components/apiAuth.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApiAuth = () => {\n  _s();\n  const [authData, setAuthData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: \"\"\n        },\n        body: undefined\n      };\n      try {\n        const response = await fetch(url, options);\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const jsonData = await response.json();\n          setData(jsonData);\n        } else {\n          const text = await response.text();\n          console.error(\"Expected JSON, got:\", text);\n          setError(new Error(\"Received non-JSON response\"));\n        }\n      } catch (fetchError) {\n        setError(fetchError);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this), authData ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(authData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 68\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(ApiAuth, \"ryK+WVMeFcgkj0quVLUzYln6Hn0=\");\n_c = ApiAuth;\nexport default ApiAuth;\nvar _c;\n$RefreshReg$(_c, \"ApiAuth\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ApiAuth","_s","authData","setAuthData","error","setError","fetchData","url","options","method","headers","Accept","Authorization","body","undefined","response","fetch","contentType","get","includes","jsonData","json","setData","text","console","Error","fetchError","children","message","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/sam/Desktop/Greenhouse-app/src/components/apiAuth.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst ApiAuth = () => {\n  const [authData, setAuthData] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n          const url =\n            \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n          const options = {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\",\n              Authorization: \"\",\n            },\n            body: undefined,\n          };\n     \n          try {\n            const response = await fetch(url, options);\n            const contentType = response.headers.get(\"content-type\");\n            if (contentType && contentType.includes(\"application/json\")) {\n              const jsonData = await response.json();\n              setData(jsonData);\n            } else {\n              const text = await response.text();\n              console.error(\"Expected JSON, got:\", text);\n              setError(new Error(\"Received non-JSON response\"));\n            }\n          } catch (fetchError) {\n            setError(fetchError);\n          }\n        };\n        fetchData();\n      }, []);\n\n  return (\n    <div>\n      {error && <p>Error: {error.message}</p>}\n      {authData ? <pre>{JSON.stringify(authData, null, 2)}</pre> : <p>Loading...</p>}\n    </div>\n  );\n};\n\nexport default ApiAuth;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MACxB,MAAMC,GAAG,GACP,oJAAoJ;MACtJ,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE,kBAAkB;UAC1BC,aAAa,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC;MACR,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAEC,OAAO,CAAC;QAC1C,MAAMS,WAAW,GAAGF,QAAQ,CAACL,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC;QACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC3D,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UACtCC,OAAO,CAACF,QAAQ,CAAC;QACnB,CAAC,MAAM;UACL,MAAMG,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACpB,KAAK,CAAC,qBAAqB,EAAEmB,IAAI,CAAC;UAC1ClB,QAAQ,CAAC,IAAIoB,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACnD;MACF,CAAC,CAAC,OAAOC,UAAU,EAAE;QACnBrB,QAAQ,CAACqB,UAAU,CAAC;MACtB;IACF,CAAC;IACDpB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEV,oBACEP,OAAA;IAAA4B,QAAA,GACGvB,KAAK,iBAAIL,OAAA;MAAA4B,QAAA,GAAG,SAAO,EAACvB,KAAK,CAACwB,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACtC9B,QAAQ,gBAAGH,OAAA;MAAA4B,QAAA,EAAMM,IAAI,CAACC,SAAS,CAAChC,QAAQ,EAAE,IAAI,EAAE,CAAC;IAAC;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,gBAAGjC,OAAA;MAAA4B,QAAA,EAAG;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV,CAAC;AAAC/B,EAAA,CA1CID,OAAO;AAAAmC,EAAA,GAAPnC,OAAO;AA4Cb,eAAeA,OAAO;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}