{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/Greenhouse-app/src/components/apiFormData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GreenHouseSpaceRequest = () => {\n  _s();\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: \"\"\n        },\n        body: undefined\n      };\n      try {\n        const response = await fetch(url, options);\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const jsonData = await response.json();\n          setData(jsonData);\n        } else {\n          const text = await response.text();\n          console.error(\"Expected JSON, got:\", text);\n          setError(new Error(\"Received non-JSON response\"));\n        }\n      } catch (fetchError) {\n        setError(fetchError);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: data ? JSON.stringify(data, null, 2) : \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(GreenHouseSpaceRequest, \"XDVXnHzsKW9JpOo48THjIq2+NOI=\");\n_c = GreenHouseSpaceRequest;\nexport default GreenHouseSpaceRequest;\nvar _c;\n$RefreshReg$(_c, \"GreenHouseSpaceRequest\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GreenHouseSpaceRequest","_s","data","setData","error","setError","fetchData","url","options","method","headers","Accept","Authorization","body","undefined","response","fetch","contentType","get","includes","jsonData","json","text","console","Error","fetchError","children","style","color","message","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/sam/Desktop/Greenhouse-app/src/components/apiFormData.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n \nconst GreenHouseSpaceRequest = () => {\n  const [data, setData] = useState(null);\n  const [error, setError] = useState(null);\n \n  useEffect(() => {\n    const fetchData = async () => {\n      const url =\n        \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: \"\",\n        },\n        body: undefined,\n      };\n \n      try {\n        const response = await fetch(url, options);\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const jsonData = await response.json();\n          setData(jsonData);\n        } else {\n          const text = await response.text();\n          console.error(\"Expected JSON, got:\", text);\n          setError(new Error(\"Received non-JSON response\"));\n        }\n      } catch (fetchError) {\n        setError(fetchError);\n      }\n    };\n    fetchData();\n  }, []);\n \n  return (\n    <div>\n      {error ? (\n        <p style={{ color: \"red\" }}>{error.message}</p>\n      ) : (\n        <pre>{data ? JSON.stringify(data, null, 2) : \"Loading...\"}</pre>\n      )}\n    </div>\n  );\n};\n \nexport default GreenHouseSpaceRequest;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,sBAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,MAAMC,GAAG,GACP,oJAAoJ;MACtJ,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCC,MAAM,EAAE,kBAAkB;UAC1BC,aAAa,EAAE;QACjB,CAAC;QACDC,IAAI,EAAEC;MACR,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAG,EAAEC,OAAO,CAAC;QAC1C,MAAMS,WAAW,GAAGF,QAAQ,CAACL,OAAO,CAACQ,GAAG,CAAC,cAAc,CAAC;QACxD,IAAID,WAAW,IAAIA,WAAW,CAACE,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC3D,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UACtClB,OAAO,CAACiB,QAAQ,CAAC;QACnB,CAAC,MAAM;UACL,MAAME,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;UAClCC,OAAO,CAACnB,KAAK,CAAC,qBAAqB,EAAEkB,IAAI,CAAC;UAC1CjB,QAAQ,CAAC,IAAImB,KAAK,CAAC,4BAA4B,CAAC,CAAC;QACnD;MACF,CAAC,CAAC,OAAOC,UAAU,EAAE;QACnBpB,QAAQ,CAACoB,UAAU,CAAC;MACtB;IACF,CAAC;IACDnB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA;IAAA2B,QAAA,EACGtB,KAAK,gBACJL,OAAA;MAAG4B,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAF,QAAA,EAAEtB,KAAK,CAACyB;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAE/ClC,OAAA;MAAA2B,QAAA,EAAMxB,IAAI,GAAGgC,IAAI,CAACC,SAAS,CAACjC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,GAAG;IAAY;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAChE;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAChC,EAAA,CA7CID,sBAAsB;AAAAoC,EAAA,GAAtBpC,sBAAsB;AA+C5B,eAAeA,sBAAsB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}