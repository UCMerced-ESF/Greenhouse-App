{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/Greenhouse-app/src/components/apiFormData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FarmFormData = () => {\n  _s();\n  const [formData, setFormData] = useState(null);\n  const [error, setError] = useState(null);\n  const [authToken, setauthToken] = useState(null);\n  useEffect(() => {\n    const fetchToken = async () => {\n      const url = '/api/auth/jwt/login';\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json'\n        },\n        body: new URLSearchParams({\n          grant_type: '',\n          username: 'ssaldivar3@ucmerced.edu',\n          password: 'ucm2873*',\n          scope: '',\n          client_id: '',\n          client_secret: ''\n        })\n      };\n      try {\n        const response = await fetch(url, options);\n        const data = await response.json();\n        setauthToken(data);\n        console.log(data);\n      } catch (error) {}\n    };\n    fetchToken();\n  }, []);\n  useEffect(() => {\n    const fetchFormData = async () => {\n      const url = \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: authToken\n        },\n        body: undefined\n      };\n      try {\n        const response = await fetch(url, options);\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const jsonData = await response.json();\n          setFormData(jsonData);\n          console.log(jsonData);\n        } else {\n          const text = await response.text();\n          console.error(\"Expected JSON, got:\", text);\n          setError(new Error(\"Received non-JSON response\"));\n        }\n      } catch (fetchError) {\n        setError(fetchError);\n      }\n    };\n    fetchFormData();\n  }, [authToken]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: formData ? JSON.stringify(formData, null, 2) : \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(FarmFormData, \"9Hli6BkHnmXic1j/yPi07MBf4ls=\");\n_c = FarmFormData;\nexport default FarmFormData;\nvar _c;\n$RefreshReg$(_c, \"FarmFormData\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FarmFormData","_s","formData","setFormData","error","setError","authToken","setauthToken","fetchToken","url","options","method","headers","Accept","body","URLSearchParams","grant_type","username","password","scope","client_id","client_secret","response","fetch","data","json","console","log","fetchFormData","Authorization","undefined","contentType","get","includes","jsonData","text","Error","fetchError","children","style","color","message","fileName","_jsxFileName","lineNumber","columnNumber","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/sam/Desktop/Greenhouse-app/src/components/apiFormData.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\n\nconst FarmFormData = () => {\n  const [formData, setFormData] = useState(null);\n  const [error, setError] = useState(null);\n  const [authToken, setauthToken] = useState(null);\n\n  useEffect(() => {\n    const fetchToken = async () => {\n      const url = '/api/auth/jwt/login';\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Accept: 'application/json'\n        },\n        body: new URLSearchParams({\n          grant_type: '',\n          username: 'ssaldivar3@ucmerced.edu',\n          password: 'ucm2873*',\n          scope: '',\n          client_id: '',\n          client_secret: ''\n        })\n      };\n\n      try {\n        const response = await fetch(url, options);\n        const data = await response.json();\n        setauthToken(data);\n        console.log(data);\n      } catch (error) {\n      }\n    };\n\n    fetchToken();\n  }, []);\n\n  useEffect(() => {\n    const fetchFormData = async () => {\n      const url =\n        \"/api/datasets/table/query/select?query=select+*+from+postgresql%28pg_data%2C+table%3D%22tabGreen+House+Space+Request%22%2C+schema%3D%22forms%22%29\";\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: authToken,\n        },\n        body: undefined,\n      };\n\n      try {\n        const response = await fetch(url, options);\n        const contentType = response.headers.get(\"content-type\");\n        if (contentType && contentType.includes(\"application/json\")) {\n          const jsonData = await response.json();\n          setFormData(jsonData);\n          console.log(jsonData);\n        } else {\n          const text = await response.text();\n          console.error(\"Expected JSON, got:\", text);\n          setError(new Error(\"Received non-JSON response\"));\n        }\n      } catch (fetchError) {\n        setError(fetchError);\n      }\n    };\n    fetchFormData();\n  }, [authToken]);\n\n  return (\n    <div>\n      {error ? (\n        <p style={{ color: \"red\" }}>{error.message}</p>\n      ) : (\n        <pre>{formData ? JSON.stringify(formData, null, 2) : \"Loading...\"}</pre>\n      )}\n    </div>\n  );\n};\n\nexport default FarmFormData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}